import sys
from collections import defaultdict


class Graph: 
   
    def __init__(self,graph): 
        self.graph = graph # residual graph 
        self. ROW = len(graph) 
        #self.COL = len(gr[0]) 
          
   
    '''Returns true if there is a path from source 's' to sink 't' in 
    residual graph. Also fills parent[] to store the path '''
    def BFS(self,s, t, parent): 
  
        # Mark all the vertices as not visited 
        visited =[False]*(self.ROW) 
          
        # Create a queue for BFS 
        queue=[] 
          
        # Mark the source node as visited and enqueue it 
        queue.append(s) 
        visited[s] = True
           
         # Standard BFS Loop 
        while queue: 
  
            #Dequeue a vertex from queue and print it 
            u = queue.pop(0) 
          
            # Get all adjacent vertices of the dequeued vertex u 
            # If a adjacent has not been visited, then mark it 
            # visited and enqueue it 
            for ind, val in enumerate(self.graph[u]): 
                if visited[ind] == False and val > 0 : 
                    queue.append(ind) 
                    visited[ind] = True
                    parent[ind] = u 
  
        # If we reached sink in BFS starting from source, then return 
        # true, else false 
        return True if visited[t] else False
              
      
    # Returns tne maximum flow from s to t in the given graph 
    def FordFulkerson(self, source, sink): 
  
        # This array is filled by BFS and to store path 
        parent = [-1]*(self.ROW) 
  
        max_flow = 0 # There is no flow initially 
  
        # Augment the flow while there is path from source to sink 
        while self.BFS(source, sink, parent) : 
  
            # Find minimum residual capacity of the edges along the 
            # path filled by BFS. Or we can say find the maximum flow 
            # through the path found. 
            path_flow = float("Inf") 
            s = sink 
            while(s !=  source): 
                path_flow = min (path_flow, self.graph[parent[s]][s]) 
                s = parent[s] 
  
            # Add path flow to overall flow 
            max_flow +=  path_flow 
  
            # update residual capacities of the edges and reverse edges 
            # along the path 
            v = sink 
            while(v !=  source): 
                u = parent[v] 
                self.graph[u][v] -= path_flow 
                self.graph[v][u] += path_flow 
                v = parent[v] 
  
        return max_flow 


trials = int(sys.stdin.readline())
for i in range(trials):
    line1 = sys.stdin.readline().split()
    datanum=int(line1[0])
    examnum=int(line1[1])
    diffi=sys.stdin.readline().split()
    diffidict={}
    for diff in diffi:
        if diff in diffidict:
            diffidict[diff] += 1
        else:
            diffidict[diff] = 1
    topics=sys.stdin.readline().split()
    topicsdict={}
    for topic in topics:
        if topic in topicsdict:
            topicsdict[topic] += 1
        else:
            topicsdict[topic] = 1        
    #print(topicsdict)
    #print(list(diffidict.values()))
    nodesnum=len(topicsdict)+len(diffidict)+2
    matrixlist=[]
    for i in range(nodesnum):
        matrixlist.append([0]*nodesnum)
    slist=[0]*nodesnum
    for i in range(len(list(diffidict.values()))):
        if list(diffidict.values())[i] != 0:
            slist[i+1] = list(diffidict.values())[i]
    matrixlist[0]=slist
    #print(matrixlist)
    #print(topics)
    #print(diffi)
    for i in range(datanum):
        line = sys.stdin.readline().split()
        #print(line)
        if line[1] in topics and line[2] in diffi:
            diff=list(diffidict.keys()).index(line[2])
            topic = list(topicsdict.keys()).index(line[1])
            #print(topic)
            matrixlist[diff+1][topic+len(diffidict)+1] += 1
    for t in topics:
        index=list(topicsdict.keys()).index(t)
        matrixlist[len(diffidict)+1+index][-1] += 1 

    graph=Graph(matrixlist)
    source=0; sink=nodesnum-1
    maxflow = graph.FordFulkerson(source,sink)
    if maxflow == examnum:
        print("Yes")
    else:
        print("No")

            
