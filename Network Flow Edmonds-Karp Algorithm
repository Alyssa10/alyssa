import sys
def max_flow(C, s, t):
        n = len(C) # C is the capacity matrix
        F = [[0] * n for i in range(n)]
        path = bfs(C, F, s, t)
      #  print path
        while path != None:
            flow = min(C[u][v] - F[u][v] for u,v in path)
            for u,v in path:
                F[u][v] += flow
                F[v][u] -= flow
            path = bfs(C, F, s, t)
        return sum(F[s][i] for i in range(n))

#find path by using BFS
def bfs(C, F, s, t):
        queue = [s]
        paths = {s:[]}
        if s == t:
            return paths[s]
        while queue: 
            u = queue.pop(0)
            for v in range(len(C)):
                    if(C[u][v]-F[u][v]>0) and v not in paths:
                        paths[v] = paths[u]+[(u,v)]
                        if v == t:
                            return paths[v]
                        queue.append(v)
        return None
    


trials = int(sys.stdin.readline())
for i in range(trials):
    line1 = sys.stdin.readline().split()
    datanum=int(line1[0])
    examnum=int(line1[1])
    diffi=sys.stdin.readline().split()
    diffidict={}
    for diff in diffi:
        if diff in diffidict:
            diffidict[diff] += 1
        else:
            diffidict[diff] = 1
    topics=sys.stdin.readline().split()
    topicsdict={}
    for topic in topics:
        if topic in topicsdict:
            topicsdict[topic] += 1
        else:
            topicsdict[topic] = 1        
    nodesnum=len(topicsdict)+len(diffidict)+2
    matrixlist=[]
    for i in range(nodesnum):
        matrixlist.append([0]*nodesnum)
    slist=[0]*nodesnum
    for i in range(len(list(diffidict.values()))):
        if list(diffidict.values())[i] != 0:
            slist[i+1] = list(diffidict.values())[i]
    matrixlist[0]=slist
    for i in range(datanum):
        line = sys.stdin.readline().split()
        if line[1] in topics and line[2] in diffi:
            diff=list(diffidict.keys()).index(line[2])
            topic = list(topicsdict.keys()).index(line[1])
            matrixlist[diff+1][topic+len(diffidict)+1] += 1
    for t in topics:
        index=list(topicsdict.keys()).index(t)
        matrixlist[len(diffidict)+1+index][-1] += 1 

    source=0; sink=nodesnum-1
    maxflow = max_flow(matrixlist,source,sink)
    if maxflow == examnum:
        print("Yes")
    else:
        print("No")

            
