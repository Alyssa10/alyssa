import sys

def Bfs(C, F, s, t):  # C is the capacity matrix
        n = len(C)
        queue = []
        queue.append(s)
        global level
        level = n * [0]  # initialization
        level[s] = 1  
        while queue:
            k = queue.pop(0)
            for i in range(n):
                    if (F[k][i] < C[k][i]) and (level[i] == 0): # not visited
                            level[i] = level[k] + 1
                            queue.append(i)
        return level[t] > 0

#search augmenting path by using DFS
def Dfs(C, F, k, cp):
        tmp = cp
        if k == len(C)-1:
            return cp
        for i in range(len(C)):
            if (level[i] == level[k] + 1) and (F[k][i] < C[k][i]):
                f = Dfs(C,F,i,min(tmp,C[k][i] - F[k][i]))
                F[k][i] = F[k][i] + f
                F[i][k] = F[i][k] - f
                tmp = tmp - f
        return cp - tmp

#calculate max flow
#_ = float('inf')
def MaxFlow(C,s,t):
        n = len(C)
        F = [n*[0] for i in range(n)] # F is the flow matrix
        flow = 0
        while(Bfs(C,F,s,t)):
               flow = flow + Dfs(C,F,s,100000)
        return flow


trials = int(sys.stdin.readline())
for i in range(trials):
    line1 = sys.stdin.readline().split()
    datanum=int(line1[0])
    examnum=int(line1[1])
    diffi=sys.stdin.readline().split()
    diffidict={}
    for diff in diffi:
        if diff in diffidict:
            diffidict[diff] += 1
        else:
            diffidict[diff] = 1
    topics=sys.stdin.readline().split()
    topicsdict={}
    for topic in topics:
        if topic in topicsdict:
            topicsdict[topic] += 1
        else:
            topicsdict[topic] = 1        
    nodesnum=len(topicsdict)+len(diffidict)+2
    matrixlist=[]
    for i in range(nodesnum):
        matrixlist.append([0]*nodesnum)
    slist=[0]*nodesnum
    for i in range(len(list(diffidict.values()))):
        if list(diffidict.values())[i] != 0:
            slist[i+1] = list(diffidict.values())[i]
    matrixlist[0]=slist
    for i in range(datanum):
        line = sys.stdin.readline().split()
        if line[1] in topics and line[2] in diffi:
            diff=list(diffidict.keys()).index(line[2])
            topic = list(topicsdict.keys()).index(line[1])
            matrixlist[diff+1][topic+len(diffidict)+1] += 1
    for t in topics:
        index=list(topicsdict.keys()).index(t)
        matrixlist[len(diffidict)+1+index][-1] += 1 
    #arr=np.array(matrixlist)
    source=0; sink=nodesnum-1
    maxflow = MaxFlow(matrixlist,source,sink)
    if maxflow == examnum:
        print("Yes")
    else:
        print("No")
